version: '3.8'

services:
  # PostgreSQL - OLTP Database
  postgres:
    image: postgres:15-alpine
    container_name: lakehouse-poc-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-socialnet}
      POSTGRES_USER: ${POSTGRES_USER:-lakeuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lakepass123}
    ports:
      - "5433:5432"  # Changed to 5433 to avoid conflict
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-lakeuser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lakehouse-network

  # MinIO - Object Storage (S3-compatible) for Iceberg tables
  minio:
    image: minio/minio:latest
    container_name: lakehouse-poc-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Web Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - lakehouse-network

  # MinIO Client - Initialize buckets for Iceberg
  minio-init:
    image: minio/mc:latest
    container_name: lakehouse-poc-minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/warehouse --ignore-existing;
      mc anonymous set download myminio/warehouse;
      echo 'MinIO buckets initialized successfully';
      exit 0;
      "
    networks:
      - lakehouse-network

  # Iceberg REST Catalog - Metadata management for Iceberg tables
  iceberg-rest:
    image: tabulario/iceberg-rest:latest
    container_name: lakehouse-poc-iceberg-rest
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
    ports:
      - "8181:8181"
    depends_on:
      - minio
      - minio-init
    networks:
      - lakehouse-network

  # DuckDB Service - For analytical queries on Iceberg tables
  duckdb:
    build:
      context: .
      dockerfile: docker/duckdb/Dockerfile
    container_name: lakehouse-poc-duckdb
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - AWS_REGION=us-east-1
      - S3_ENDPOINT=http://minio:9000
      - ICEBERG_REST_URI=http://iceberg-rest:8181
    ports:
      - "8082:8082"  # DuckDB HTTP API
    volumes:
      - ./data:/app/data
      - duckdb_data:/app/duckdb
    depends_on:
      - minio
      - minio-init
      - iceberg-rest
    networks:
      - lakehouse-network

  # ETL Service - Extract from PostgreSQL, Load to Iceberg using PyIceberg
  etl:
    build:
      context: .
      dockerfile: docker/etl/Dockerfile
    container_name: lakehouse-poc-etl
    environment:
      # OLTP Source
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-socialnet}
      - POSTGRES_USER=${POSTGRES_USER:-lakeuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-lakepass123}
      # Object Storage (MinIO)
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - AWS_REGION=us-east-1
      - S3_ENDPOINT=http://minio:9000
      # Iceberg
      - ICEBERG_REST_URI=http://iceberg-rest:8181
      - ICEBERG_WAREHOUSE=s3://warehouse/
      # ETL Config
      - ETL_BATCH_SIZE=${ETL_BATCH_SIZE:-10000}
      - ETL_SCHEDULE_INTERVAL=${ETL_SCHEDULE_INTERVAL:-3600}
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      iceberg-rest:
        condition: service_started
    networks:
      - lakehouse-network

  # AI Agent Service (FastAPI) - Query routing and NL to SQL
  ai-agent:
    build:
      context: .
      dockerfile: docker/ai-agent/Dockerfile
    container_name: lakehouse-poc-ai-agent
    environment:
      # OLTP Database
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-socialnet}
      - POSTGRES_USER=${POSTGRES_USER:-lakeuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-lakepass123}
      # DuckDB for Lakehouse queries
      - DUCKDB_PATH=/app/data/lakehouse.duckdb
      - DUCKDB_SERVICE_URL=http://duckdb:8082
      # Iceberg
      - ICEBERG_REST_URI=http://iceberg-rest:8181
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - S3_ENDPOINT=http://minio:9000
      # AI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - LLM_TEMPERATURE=${LLM_TEMPERATURE:-0.0}
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      duckdb:
        condition: service_started
      iceberg-rest:
        condition: service_started
    networks:
      - lakehouse-network
    command: uvicorn src.ai_agent.main:app --host 0.0.0.0 --port 8000 --reload

  # ============================================
  # OBSERVABILITY STACK
  # ============================================

  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:latest
    container_name: lakehouse-poc-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    networks:
      - lakehouse-network
    restart: unless-stopped

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: lakehouse-poc-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - lakehouse-network
    restart: unless-stopped

  # OpenTelemetry Collector - Telemetry data collection and processing
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: lakehouse-poc-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # Health check extension
      - "55679:55679" # zpages extension
    volumes:
      - ./monitoring/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    depends_on:
      - prometheus
      - jaeger
      - loki
    networks:
      - lakehouse-network
    restart: unless-stopped

  # Jaeger - Distributed tracing backend
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: lakehouse-poc-jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "5775:5775/udp"   # Zipkin compact thrift
      - "6831:6831/udp"   # Jaeger compact thrift
      - "6832:6832/udp"   # Jaeger binary thrift
      - "5778:5778"       # Serve configs
      - "16686:16686"     # Jaeger UI
      - "14250:14250"     # gRPC
      - "14268:14268"     # HTTP collector
      - "14269:14269"     # Admin port
      - "9411:9411"       # Zipkin compatible endpoint
    networks:
      - lakehouse-network
    restart: unless-stopped

  # Loki - Log aggregation system
  loki:
    image: grafana/loki:latest
    container_name: lakehouse-poc-loki
    command: -config.file=/etc/loki/loki-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/loki-config.yaml
      - loki_data:/loki
    networks:
      - lakehouse-network
    restart: unless-stopped

  # PostgreSQL Exporter - Exports PostgreSQL metrics to Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: lakehouse-poc-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-lakeuser}:${POSTGRES_PASSWORD:-lakepass123}@postgres:5432/${POSTGRES_DB:-socialnet}?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lakehouse-network
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:
  duckdb_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  lakehouse-network:
    driver: bridge
